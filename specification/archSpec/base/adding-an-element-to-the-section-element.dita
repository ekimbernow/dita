<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="adding-an-element-to-the-section-element" rev="2.0">
  <title>Example: Adding an element to the <xmlelement>section</xmlelement>
    element using DTDs</title>
  <shortdesc>In this scenario, a DITA architect wants to modify the content
    model for the <xmlelement>section</xmlelement> element. The DITA
    architect wants to add an optional <xmlelement>sectionDesc</xmlelement>
    element that is specialized from
    <xmlelement>p</xmlelement>.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>expansion modules<indexterm>examples<indexterm>expanding
              content model of
            <xmlelement>section</xmlelement></indexterm></indexterm></indexterm>
        <indexterm>examples<indexterm>expansion modules<indexterm>expanding
              content model of
            <xmlelement>section</xmlelement></indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <example>
      <p>To accomplish this, the DITA architect needs to create the
        following modules and integrate them into the document-type
        shell:</p>
      <ul>
        <li>An <ph rev="review-p">element-domain</ph> specialization module
          that defines the <xmlelement>sectionDesc</xmlelement>
          element</li>
        <li>An expansion module that adds the
            <xmlelement>sectionDesc</xmlelement> element to the content
          model for <xmlelement>section</xmlelement></li>
      </ul>
      <ol>
        <li>First, the DITA architect creates the element specialization
          module: <filepath>sectionDescDomain.mod</filepath>. This single
            <filepath>.mod</filepath> file defines the parameter entity,
          content model, attributes, and value for the
            <xmlatt>class</xmlatt> attribute for
            <xmlelement>sectionDesc</xmlelement>.<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;!ENTITY % sectionDesc "sectionDesc">

&lt;!ENTITY % sectionDesc.content "(%para.cnt;)*">
&lt;!ENTITY % sectionDesc.attributes "%univ-atts;">

&lt;!ELEMENT sectionDesc %sectionDesc.content;>
&lt;!ATTLIST sectionDesc %sectionDesc.attributes;>

&lt;!ATTLIST sectionDesc    class CDATA "+ topic/p <ph rev="review-k">sectionDesc-d</ph>/sectionDesc "></codeblock></li>
        <li>The DITA architect adds the element specialization module to
          the <filepath>catalog.xml</filepath> file.</li>
        <li>Next, the DITA architect modifies the applicable document-type
          shell to integrate the applicable element specialization
            module:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN ELEMENT INTEGRATION                 -->
&lt;!-- ============================================================= -->

&lt;!-- ... other domains ... -->

<b>&lt;!ENTITY % sectionDesc-d-def
  PUBLIC "-//ACME//ELEMENTS DITA 2.0 Section Description Domain//EN"
         "sectionDescDomain.mod"
>%sectionDesc-d-def;</b></codeblock><p>At this point, the new
            domain is integrated into the topic document-type shell.
            However, the new element is not added to the content model for
              <xmlelement>section</xmlelement>.</p></li>
        <li>Next, the DITA architect creates an expansion module:
            <filepath>acme-SectionExpansion.mod</filepath>. This module adds the
            <xmlelement>sectionDesc</xmlelement> element to the content model of
            <xmlelement>section</xmlelement>.<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;!-- Declares the entities referenced in the modified content  -->
&lt;!-- model.                                                    -->

&lt;!ENTITY % dl "dl">
&lt;!ENTITY % div "div">
&lt;!ENTITY % fig "fig">
&lt;!ENTITY % image "image">
&lt;!ENTITY % lines "lines">
&lt;!ENTITY % lq "lq">
&lt;!ENTITY % note "note">
&lt;!ENTITY % object "object">
&lt;!ENTITY % ol "ol">
&lt;!ENTITY % p "p">
&lt;!ENTITY % pre "pre">
&lt;!ENTITY % simpletable "simpletable">
&lt;!ENTITY % sl "sl">
&lt;!ENTITY % table "table">
&lt;!ENTITY % ul "ul">
&lt;!ENTITY % cite "cite">
&lt;!ENTITY % include "include">
&lt;!ENTITY % keyword "keyword">
&lt;!ENTITY % ph "ph">
&lt;!ENTITY % q "q">
&lt;!ENTITY % term "term">
&lt;!ENTITY % text "text">
&lt;!ENTITY % tm "tm">
&lt;!ENTITY % xref "xref">
&lt;!ENTITY % data "data">
&lt;!ENTITY % foreign "foreign">
&lt;!ENTITY % title "title">
&lt;!ENTITY % draft-comment "draft-comment">
&lt;!ENTITY % fn "fn">
&lt;!ENTITY % indexterm "indexterm">
&lt;!ENTITY % required-cleanup "required-cleanup">
<b>&lt;!ENTITY % sectionDesc "sectionDesc"></b>

&lt;!-- Defines the modified content model for &lt;section>.       -->

&lt;!ENTITY % section.content
              "(#PCDATA |
               %dl; |
               %div; |
               %fig; |
               %image; |
               %lines; |
               %lq; |
               %note; |
               %object; |
               %ol; |
               %p; |
               %pre; |
               %simpletable; |
               %sl; |
               %table; |
               %ul; |
               %cite; |
               %include; |
               %keyword; |
               %ph; |
               %q; |
               %term; |
               %text; |
               %tm; |
               %xref; |
               %data; |
               %foreign; |
               %title; |
               %draft-comment; |
               %fn; |
               %indexterm; |
               %required-cleanup; |
               <b>%sectionDesc;</b>)*"
></codeblock>
          <p>Note that the DITA architect needed to explicitly declare all the elements, rather than
            using the <parameterentity>section.cnt</parameterentity> parameter entity that is used
            in the definition of <xmlelement>section</xmlelement>. Because the element-configuration
            modules are integrated into the document-type shell before the base grammar modules,
            none of the parameter entities that are used in the base DITA vocabulary modules are
            available.</p></li>
        <li>Finally, the DITA architect integrates the expansion module
          into the document-type
          shell:<codeblock>&lt;!-- ============================================================= -->
&lt;!--           ELEMENT-TYPE CONFIGURATION INTEGRATION              -->
&lt;!-- ============================================================= -->

&lt;!-- Other constraint and expansion modules -->
<b>
&lt;!ENTITY % acmeSection-def
  PUBLIC "-//ACME//ELEMENTS DITA 2.0 Section Expansion//EN"
         "acme-SectionExpansion.mod"
>%acmeSection-def;</b></codeblock></li>
        <li>After updating the <filepath>catalog.xml</filepath> file to
          include the expansion module and <ph rev="review-c">testing
            it</ph>, the work is done.</li>
      </ol>
    </example>
  </conbody>
</concept>
